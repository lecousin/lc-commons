<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <property name="severity" value="error"/>

  <property name="fileExtensions" value="java"/>

  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="module\-info\.java$" />
  </module>
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value=".*[\\/]src[\\/]test[\\/].*$"/>
  </module>

  <!-- Filters -->
  <module name="SeverityMatchFilter">
    <!-- report all violations except ignore -->
    <property name="severity" value="ignore"/>
    <property name="acceptOnMatch" value="false"/>
  </module>
  <module name="SuppressWithPlainTextCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE OFF"/>
    <property name="onCommentFormat" value="CHECKSTYLE ON"/>
  </module>
  <module name="SuppressWithPlainTextCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE DISABLE\: ([\w\|]+)"/>
    <property name="onCommentFormat" value="CHECKSTYLE ENABLE\: ([\w\|]+)"/>
    <property name="checkFormat" value="$1"/>
  </module>

  <module name="RegexpOnFilename">
    <property name="id" value="javaFileLocation"/>
    <property name="folderPattern" value="[\\/]src[\\/]\w+[\\/]java[\\/]"/>
    <property name="fileNamePattern" value="\.java$"/>
    <property name="match" value="false"/>
    <message key="regexp.filepath.mismatch"
             value="Only java files should be located in the ''src/*/java'' folders."/>
  </module>

  <!-- Size Violations -->
  <module name="LineLength">
    <property name="fileExtensions" value="java"/>
    <property name="max" value="200"/>
    <property name="ignorePattern"
              value="^( *\* *([^ ]+|\{@code .*|&lt;a href=&quot;[^&quot;]+&quot;&gt;)|(package|import) .*)$"/>
  </module>

  <module name="TreeWalker">
    <property name="tabWidth" value="4"/>

    <!-- Annotations -->
    <module name="AnnotationLocation">
    </module>
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>

    <!-- Block Checks -->
    <module name="AvoidNestedBlocks">
      <property name="allowInSwitchCase" value="true"/>
    </module>
    <module name="EmptyBlock">
      <property name="tokens" value="LITERAL_CATCH"/>
      <property name="tokens" value="ARRAY_INIT"/>
      <property name="tokens" value="LITERAL_DEFAULT"/>
      <property name="tokens" value="LITERAL_CASE"/>
      <property name="tokens" value="INSTANCE_INIT"/>
      <property name="tokens" value="LITERAL_DO"/>
      <property name="tokens" value="LITERAL_ELSE"/>
      <property name="tokens" value="LITERAL_FINALLY"/>
      <property name="tokens" value="LITERAL_FOR"/>
      <property name="tokens" value="LITERAL_IF"/>
      <property name="tokens" value="LITERAL_SWITCH"/>
      <property name="tokens" value="LITERAL_SYNCHRONIZED"/>
      <property name="tokens" value="LITERAL_TRY"/>
      <property name="tokens" value="LITERAL_WHILE"/>
      <property name="tokens" value="STATIC_INIT"/>
      <property name="option" value="text"/>
    </module>
    <module name="EmptyCatchBlock"/>
    <module name="LeftCurly"/>
    <module name="RightCurly">
      <property name="tokens" value="METHOD_DEF"/>
      <property name="tokens" value="CTOR_DEF"/>
      <property name="tokens" value="CLASS_DEF"/>
      <property name="tokens" value="INSTANCE_INIT"/>
      <property name="tokens" value="LITERAL_FOR"/>
      <property name="tokens" value="STATIC_INIT"/>
      <property name="tokens" value="LITERAL_FINALLY"/>
      <property name="tokens" value="ANNOTATION_DEF"/>
      <property name="tokens" value="ENUM_DEF"/>
      <property name="tokens" value="RECORD_DEF"/>
      <property name="tokens" value="COMPACT_CTOR_DEF"/>
      <property name="option" value="alone"/>
    </module>
    <module name="RightCurly">
      <property name="tokens" value="LITERAL_TRY"/>
      <property name="tokens" value="LITERAL_CATCH"/>
      <property name="tokens" value="LITERAL_IF"/>
      <property name="tokens" value="LITERAL_ELSE"/>
      <property name="tokens" value="LITERAL_DO"/>
      <property name="tokens" value="LITERAL_WHILE"/>
      <property name="option" value="same"/>
    </module>
    <module name="RightCurly">
      <property name="tokens" value="INTERFACE_DEF"/>
      <property name="option" value="alone_or_singleline"/>
    </module>

    <!-- Class Design -->
    <module name="FinalClass"/>
    <module name="MutableException"/>
    <module name="OneTopLevelClass"/>
    <module name="ThrowsCount">
      <property name="max" value="3"/>
    </module>
    <module name="VisibilityModifier">
      <property name="protectedAllowed" value="true"/>
    </module>

    <!-- Coding -->
    <module name="AvoidDoubleBraceInitialization"/>
    <module name="AvoidNoArgumentSuperConstructorCall"/>
    <module name="CovariantEquals"/>
    <module name="DefaultComesLast"/>
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="FallThrough"/>
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="setterCanReturnItsClass" value="true"/>
    </module>
    <module name="IllegalToken">
      <property name="tokens" value="LABELED_STAT"/>
      <property name="tokens" value="LITERAL_ASSERT"/>
    </module>
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL"/>
      <property name="format" value="^(US-ASCII|ISO-8859-1|UTF-8|UTF-16BE|UTF-16LE|UTF-16)$"/>
      <property name="ignoreCase" value="true"/>
    </module>
    <module name="MagicNumber"/>
    <module name="MatchXpath">
      <property name="query" value="//CLASS_DEF[@text!='Checker' and @text!='Main']
      //LITERAL_CATCH//METHOD_CALL[.//IDENT[@text = 'printStackTrace']]/.."/>
      <message key="matchxpath.match" value="Avoid using 'printStackTrace'."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="singleLineCommentStartWithSpace"/>
      <property name="query"
                value="//SINGLE_LINE_COMMENT[./COMMENT_CONTENT[not(starts-with(@text, ' '))
                       and not(@text = '\n') and not(ends-with(@text, '//\n'))
                       and not(@text = '\r') and not(ends-with(@text, '//\r'))
                       and not(@text = '\r\n') and not(ends-with(@text, '//\r\n'))]]"/>
      <message key="matchxpath.match" value="Single line comment text should start with space."/>
    </module>
    <module name="MatchXpath">
      <property name="id" value="blockCommentStartWithSpace"/>
      <property name="query"
                value="//BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT[matches(@text, '\\n+ *\*[^\\n ]\S')
                       or matches(@text, '^[^\* \\n]') or matches(@text, '\\r+ *\*[^\\r ]\S')
                       or matches(@text, '^[^\* \\r]') or matches(@text, '\\r\\n+ *\*[^\\r\\n ]\S')
                       or matches(@text, '^[^\* \\r\\n]') and not(starts-with(@text, '*'))]]"/>
      <message key="matchxpath.match"
               value="Block comment text should start with space after asterisk."/>
    </module>
    <module name="MultipleVariableDeclarations"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="SuperClone"/>
    <module name="SuperFinalize"/>
    <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
    <module name="UnnecessarySemicolonInEnumeration"/>
    <module name="UnnecessarySemicolonInTryWithResources"/>
    <module name="UnusedLocalVariable"/>
    <module name="VariableDeclarationUsageDistance">
      <property name="allowedDistance" value="8"/>
    </module>

    <!-- Imports -->
    <module name="AvoidStarImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- Misc -->
    <module name="ArrayTypeStyle"/>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowIfAllCharactersEscaped" value="true"/>
    </module>
    <module name="OuterTypeFilename"/>
    <module name="UpperEll"/>

    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Naming Conventions -->
    <module name="AbbreviationAsWordInName">
      <property name="allowedAbbreviationLength" value="4"/>
    </module>
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName">
    </module>
    <module name="MemberName">
    </module>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName">
      <property name="ignoreOverridden" value="true"/>
    </module>
    <module name="LambdaParameterName">
    </module>
    <module name="CatchParameterName">
      <property name="format" value="^(e|t|ex|[a-z][a-z][a-zA-Z0-9]+)$"/>
    </module>
    <module name="StaticVariableName">
    </module>
    <module name="TypeName"/>
    <module name="PatternVariableName"/>
    <module name="IllegalIdentifierName"/>

    <!-- Whitespace -->
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
      <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
    </module>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoLineWrap"/>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="AT,INC,DEC,UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP "/>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="allowLineBreaks" value="true"/>
    </module>
    <module name="NoWhitespaceBeforeCaseDefaultColon"/>
    <module name="ParenPad"/>
    <module name="SingleSpaceSeparator">
      <property name="validateComments" value="false"/>
    </module>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>

  </module>

</module>